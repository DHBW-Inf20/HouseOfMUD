<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Unit Tests" tests="19" failures="0" errors="0" time="95.512">
  <testsuite name="backend\game\test\action-handling.test.ts" errors="0" failures="0" skipped="18" timestamp="2022-04-23T12:37:40" time="95.003" tests="19">
    <testcase classname="Test - ActionHandler" name="ActionHandler should call performAction on MessageAction with the correct parameters when it receives a &quot;sag&quot; action message" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - ActionHandler" name="ActionHandler should call performAction on PrivateMessageAction with the correct parameters when it receives a &quot;fluester&quot; action message" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - ActionHandler" name="ActionHandler should call performAction on DiscardAction with the correct parameters when it receives a &quot;ablegen&quot; action message" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - ActionHandler" name="ActionHandler should call performAction on InspectAction with the correct parameters when it receives a &quot;untersuche&quot; action message" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - ActionHandler" name="ActionHandler should call performAction on LookAction with the correct parameters when it receives a &quot;umschauen&quot; action message" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - ActionHandler" name="ActionHandler should call performAction on MoveAction with the correct parameters when it receives a &quot;gehe&quot; action message" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - ActionHandler" name="ActionHandler should call performAction on PickupAction with the correct parameters when it receives a &quot;aufheben&quot; action message" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - ActionHandler" name="ActionHandler should call performAction on DungeonAction with the correct parameters when it receives a non standard action message" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - ActionHandler" name="ActionHandler should call performAction on UnspecifiedAction with the correct parameters when it receives a non specified action message" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - Actions" name="MessageAction should call sendWithRouting on the AmqpAdapter with the correct routingKey and payload" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - Actions" name="PrivateMessageAction should call sendToClient on the AmqpAdapter to both users with the correct payload" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - Actions" name="PrivateMessageAction should call sendToClient on the AmqpAdapter to the initial sender saying the recipient is not in the same room when trying to send a message to a character that is not in the same room" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - Actions" name="PrivateMessageAction should call sendToClient on the AmqpAdapter to the initial sender saying the recipient does not exist in the dungeon when trying to send a message to a character that does not exist" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - Actions" name="MoveAction should modify the position, call the functions to bind the client queues and call sendWithRouting on the AmqpAdapter when user moves to another room" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - Actions" name="MoveAction should modify the position to the room in the East when user moves east" time="89.834">
    </testcase>
    <testcase classname="Test - Actions" name="MoveAction should modify the position to the room in the South when user moves south" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - Actions" name="MoveAction should modify the position to the room in the West when user moves west" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - Actions" name="MoveAction should call sendToClient on AmqpAdapter to the initial sender saying the room does not exist" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Test - Actions" name="MoveAction should call sendToClient on AmqpAdapter to the initial sender saying the room is closed" time="0">
      <skipped/>
    </testcase>
  </testsuite>
</testsuites>